<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>pic-product</artifactId>
    <version>1.0-SNAPSHOT</version>

    <parent>
    <!--   统一的管理所有的子模块共享这个配置,所有子模块按照统一的方式进行构建  比如都用同一个代码质量检查插件  -->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.17</version>
    </parent>

    <modules>
        <module>pic-common</module>
        <module>pic-starter</module>
        <module>pic-notice-service</module>
        <module>pic-transaction-service</module>
        <module>pic-asynchronous-task-service</module>
        <module>pic-inner-mail-service</module>
        <module>pic-network-comm-service</module>
        <module>pic-privileges-service</module>
        <module>pic-database-manage-service</module>
        <module>pic-cache-service</module>
        <module>pic-task-deal-service</module>
        <module>pic-mq-connection-service</module>
        <module>pic-controller</module>
    </modules>
    <packaging>pom</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>8</java.version>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>

        <spring.boot.version>2.7.17</spring.boot.version>
        <!--自动给类生成get set方法 和构造函数等 -->
        <lombok.version>1.18.28</lombok.version>
        <!--结构化数据序列化 用于存储或通信    -->
        <protobuf-java.version>3.21.1</protobuf-java.version>
        <!--单元测试   -->
        <junit.version>4.13.2</junit.version>
        <!--用于加密-->
        <commons.codec.version>1.15</commons.codec.version>
        <!-- 字符串操作、集合操作、输入输出处理等 -->
        <commons.lang3.version>3.9</commons.lang3.version>

        <!--！！！！访问接口Controller！！！！   -->
        <!-- Swagger dependencies -->
        <springfox.boot.starter.version>3.0.0</springfox.boot.starter.version>


        <!--跳过单元测试-->
        <skipTests>true</skipTests>

        <!--        镜像打包的时候-->
        <!--        <docker.image.prefix>xdclass-cloud</docker.image.prefix>-->

        <!--在项目中集成阿里巴巴的云服务功能，例如使用云数据库、云存储-->
<!--        <alibaba.cloud.version>2.2.9.RELEASE</alibaba.cloud.version>-->

    </properties>

    <!--子模块找父模块的这个management标签 获取依赖-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <!--单元测试-->
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <!--      代码热加载       -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-devtools</artifactId>
                <version>3.1.2</version>
                <scope>runtime</scope>
                <!--表示这个依赖项是可选的，即使没有它，项目也可以编译和运行-->
                <optional>true</optional>
            </dependency>

<!--            <dependency>-->
<!--                &lt;!&ndash; @Runwith(SpringRunner.class) Spring框架通用的测试库，适用于所有Spring应用程序的测试&ndash;&gt;-->
<!--                <groupId>org.springframework</groupId>-->
<!--                <artifactId>spring-test</artifactId>-->
<!--                <version>6.0.11</version>-->
<!--                <scope>test</scope>-->
<!--            </dependency>-->

<!--            <dependency>-->
<!--                &lt;!&ndash;@SpringBootTest注解 专门用于Spring Boot应用程序的测试 &ndash;&gt;-->
<!--                <groupId>org.springframework.boot</groupId>-->
<!--                <artifactId>spring-boot-test</artifactId>-->
<!--                <version>3.1.2</version>-->
<!--                <scope>test</scope>-->
<!--            </dependency>-->


            <dependency>
                <!--@Date @AllArgsConstructor自动生成getter setter -->
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <!--scope=provided，说明它只在编译阶段生效，不需要打入包中, Lombok在编译期将带Lombok注解的Java文件正确编译为完整的Class文件-->
                <!--                如果设置了这个参数，打包就不能被传递，在common包中的lombok在product-service不能用-->
                <!--                <scope>provided</scope>-->
            </dependency>

            <dependency>
                <!-- 字符串操作、集合操作、输入输出处理等 -->
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons.lang3.version}</version>
            </dependency>

            <dependency>
                <!--用于加密-->
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>${commons.codec.version}</version>
            </dependency>

            <dependency>
                <!--接口文档依赖 Swagger-->
                <groupId>io.springfox</groupId>
                <artifactId>springfox-boot-starter</artifactId>
                <version>${springfox.boot.starter.version}</version>
            </dependency>

            <!-- 验证码 生成器-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>kaptcha-spring-boot-starter</artifactId>
                <version>1.1.0</version>
            </dependency>

            <!--连接操作阿里云OSS 对象存储服务-->
            <dependency>
                <groupId>com.aliyun.oss</groupId>
                <artifactId>aliyun-sdk-oss</artifactId>
                <version>3.8.0</version>
            </dependency>

            <!-- java中实现的Redis客户端 操作redis-->
            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson</artifactId>
                <version>3.10.1</version>
            </dependency>

            <!-- fastJson 快速将Java对象序列化为JSON格式或从JSON格式反序列化为Java对象-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>1.2.7</version>
            </dependency>

            <!-- 在分布式系统中传递线程本地变量 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>transmittable-thread-local</artifactId>
                <version>2.11.1</version>
            </dependency>


            <!-- 接口参数校验 @NotNull @Min -->
            <dependency>
                <groupId>javax.validation</groupId>
                <artifactId>validation-api</artifactId>
                <version>2.0.1.Final</version>
            </dependency>


<!--            <dependency>-->
<!--                <groupId>org.springframework.cloud</groupId>-->
<!--                <artifactId>spring-cloud-dependencies</artifactId>-->
<!--                <version>${spring.cloud.version}</version>-->
<!--                <type>pom</type>-->
<!--                <scope>import</scope>-->
<!--            </dependency>-->

<!--            <dependency>-->
<!--                <groupId>com.alibaba.cloud</groupId>-->
<!--                <artifactId>spring-cloud-alibaba-dependencies</artifactId>-->
<!--                <version>${alibaba.cloud.version}</version>-->
<!--                <type>pom</type>-->
<!--                <scope>import</scope>-->
<!--            </dependency>-->

        </dependencies>
    </dependencyManagement>


    <!-- 代码库 -->
    <repositories>
        <repository>
            <id>ali-code-repo</id>
            <name>ali-code-repo</name>
            <url>https://maven.aliyun.com/nexus/content/groups/public//</url>
<!-- 允许取得发布版本-->
            <releases>
                <enabled>true</enabled>
            </releases>
<!-- 允许取得快照版本-->
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
                <checksumPolicy>fail</checksumPolicy>
            </snapshots>
        </repository>
    </repositories>

    <!--插件库-->
    <pluginRepositories>
        <pluginRepository>
            <id>ali-plugin-repo</id>
            <name>ali-plugin-repo</name>
            <url>https://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <!--module不用添加打包版本信息-->
    <!-- springboot打包成docker镜像使用的-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
<!--   使用一个单独的Java进程，允许独立地控制应用的内存和JVM参数-->
<!--                    <fork>true</fork>-->
<!--   将resources文件夹加到构建路径当中去                  -->
                    <addResources>true</addResources>
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>